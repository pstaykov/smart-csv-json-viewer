{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://smart-csv-json-viewer/./node_modules/papaparse/papaparse.js","webpack://smart-csv-json-viewer/external node-commonjs \"stream\"","webpack://smart-csv-json-viewer/./src/extension.ts","webpack://smart-csv-json-viewer/external commonjs \"vscode\"","webpack://smart-csv-json-viewer/external node-commonjs \"path\"","webpack://smart-csv-json-viewer/webpack/bootstrap","webpack://smart-csv-json-viewer/webpack/startup"],"sourcesContent":["/* @license\nPapa Parse\nv5.5.3\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/\n\n(function(root, factory)\n{\n\t/* globals define */\n\tif (typeof define === 'function' && define.amd)\n\t{\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([], factory);\n\t}\n\telse if (typeof module === 'object' && typeof exports !== 'undefined')\n\t{\n\t\t// Node. Does not work with strict CommonJS, but\n\t\t// only CommonJS-like environments that support module.exports,\n\t\t// like Node.\n\t\tmodule.exports = factory();\n\t}\n\telse\n\t{\n\t\t// Browser globals (root is window)\n\t\troot.Papa = factory();\n\t}\n\t// in strict mode we cannot access arguments.callee, so we need a named reference to\n\t// stringify the factory method for the blob worker\n\t// eslint-disable-next-line func-name\n}(this, function moduleFactory()\n{\n\t'use strict';\n\n\tvar global = (function() {\n\t\t// alternative method, similar to `Function('return this')()`\n\t\t// but without using `eval` (which is disabled when\n\t\t// using Content Security Policy).\n\n\t\tif (typeof self !== 'undefined') { return self; }\n\t\tif (typeof window !== 'undefined') { return window; }\n\t\tif (typeof global !== 'undefined') { return global; }\n\n\t\t// When running tests none of the above have been defined\n\t\treturn {};\n\t})();\n\n\n\tfunction getWorkerBlob() {\n\t\tvar URL = global.URL || global.webkitURL || null;\n\t\tvar code = moduleFactory.toString();\n\t\treturn Papa.BLOB_URL || (Papa.BLOB_URL = URL.createObjectURL(new Blob([\"var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; \", '(', code, ')();'], {type: 'text/javascript'})));\n\t}\n\n\tvar IS_WORKER = !global.document && !!global.postMessage,\n\t\tIS_PAPA_WORKER = global.IS_PAPA_WORKER || false;\n\n\tvar workers = {}, workerIdCounter = 0;\n\n\tvar Papa = {};\n\n\tPapa.parse = CsvToJson;\n\tPapa.unparse = JsonToCsv;\n\n\tPapa.RECORD_SEP = String.fromCharCode(30);\n\tPapa.UNIT_SEP = String.fromCharCode(31);\n\tPapa.BYTE_ORDER_MARK = '\\ufeff';\n\tPapa.BAD_DELIMITERS = ['\\r', '\\n', '\"', Papa.BYTE_ORDER_MARK];\n\tPapa.WORKERS_SUPPORTED = !IS_WORKER && !!global.Worker;\n\tPapa.NODE_STREAM_INPUT = 1;\n\n\t// Configurable chunk sizes for local and remote files, respectively\n\tPapa.LocalChunkSize = 1024 * 1024 * 10;\t// 10 MB\n\tPapa.RemoteChunkSize = 1024 * 1024 * 5;\t// 5 MB\n\tPapa.DefaultDelimiter = ',';\t\t\t// Used if not specified and detection fails\n\n\t// Exposed for testing and development only\n\tPapa.Parser = Parser;\n\tPapa.ParserHandle = ParserHandle;\n\tPapa.NetworkStreamer = NetworkStreamer;\n\tPapa.FileStreamer = FileStreamer;\n\tPapa.StringStreamer = StringStreamer;\n\tPapa.ReadableStreamStreamer = ReadableStreamStreamer;\n\tif (typeof PAPA_BROWSER_CONTEXT === 'undefined') {\n\t\tPapa.DuplexStreamStreamer = DuplexStreamStreamer;\n\t}\n\n\tif (global.jQuery)\n\t{\n\t\tvar $ = global.jQuery;\n\t\t$.fn.parse = function(options)\n\t\t{\n\t\t\tvar config = options.config || {};\n\t\t\tvar queue = [];\n\n\t\t\tthis.each(function(idx)\n\t\t\t{\n\t\t\t\tvar supported = $(this).prop('tagName').toUpperCase() === 'INPUT'\n\t\t\t\t\t\t\t\t&& $(this).attr('type').toLowerCase() === 'file'\n\t\t\t\t\t\t\t\t&& global.FileReader;\n\n\t\t\t\tif (!supported || !this.files || this.files.length === 0)\n\t\t\t\t\treturn true;\t// continue to next input element\n\n\t\t\t\tfor (var i = 0; i < this.files.length; i++)\n\t\t\t\t{\n\t\t\t\t\tqueue.push({\n\t\t\t\t\t\tfile: this.files[i],\n\t\t\t\t\t\tinputElem: this,\n\t\t\t\t\t\tinstanceConfig: $.extend({}, config)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tparseNextFile();\t// begin parsing\n\t\t\treturn this;\t\t// maintains chainability\n\n\n\t\t\tfunction parseNextFile()\n\t\t\t{\n\t\t\t\tif (queue.length === 0)\n\t\t\t\t{\n\t\t\t\t\tif (isFunction(options.complete))\n\t\t\t\t\t\toptions.complete();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar f = queue[0];\n\n\t\t\t\tif (isFunction(options.before))\n\t\t\t\t{\n\t\t\t\t\tvar returned = options.before(f.file, f.inputElem);\n\n\t\t\t\t\tif (typeof returned === 'object')\n\t\t\t\t\t{\n\t\t\t\t\t\tif (returned.action === 'abort')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terror('AbortError', f.file, f.inputElem, returned.reason);\n\t\t\t\t\t\t\treturn;\t// Aborts all queued files immediately\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (returned.action === 'skip')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfileComplete();\t// parse the next file in the queue, if any\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (typeof returned.config === 'object')\n\t\t\t\t\t\t\tf.instanceConfig = $.extend(f.instanceConfig, returned.config);\n\t\t\t\t\t}\n\t\t\t\t\telse if (returned === 'skip')\n\t\t\t\t\t{\n\t\t\t\t\t\tfileComplete();\t// parse the next file in the queue, if any\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Wrap up the user's complete callback, if any, so that ours also gets executed\n\t\t\t\tvar userCompleteFunc = f.instanceConfig.complete;\n\t\t\t\tf.instanceConfig.complete = function(results)\n\t\t\t\t{\n\t\t\t\t\tif (isFunction(userCompleteFunc))\n\t\t\t\t\t\tuserCompleteFunc(results, f.file, f.inputElem);\n\t\t\t\t\tfileComplete();\n\t\t\t\t};\n\n\t\t\t\tPapa.parse(f.file, f.instanceConfig);\n\t\t\t}\n\n\t\t\tfunction error(name, file, elem, reason)\n\t\t\t{\n\t\t\t\tif (isFunction(options.error))\n\t\t\t\t\toptions.error({name: name}, file, elem, reason);\n\t\t\t}\n\n\t\t\tfunction fileComplete()\n\t\t\t{\n\t\t\t\tqueue.splice(0, 1);\n\t\t\t\tparseNextFile();\n\t\t\t}\n\t\t};\n\t}\n\n\n\tif (IS_PAPA_WORKER)\n\t{\n\t\tglobal.onmessage = workerThreadReceivedMessage;\n\t}\n\n\n\n\n\tfunction CsvToJson(_input, _config)\n\t{\n\t\t_config = _config || {};\n\t\tvar dynamicTyping = _config.dynamicTyping || false;\n\t\tif (isFunction(dynamicTyping)) {\n\t\t\t_config.dynamicTypingFunction = dynamicTyping;\n\t\t\t// Will be filled on first row call\n\t\t\tdynamicTyping = {};\n\t\t}\n\t\t_config.dynamicTyping = dynamicTyping;\n\n\t\t_config.transform = isFunction(_config.transform) ? _config.transform : false;\n\n\t\tif (_config.worker && Papa.WORKERS_SUPPORTED)\n\t\t{\n\t\t\tvar w = newWorker();\n\n\t\t\tw.userStep = _config.step;\n\t\t\tw.userChunk = _config.chunk;\n\t\t\tw.userComplete = _config.complete;\n\t\t\tw.userError = _config.error;\n\n\t\t\t_config.step = isFunction(_config.step);\n\t\t\t_config.chunk = isFunction(_config.chunk);\n\t\t\t_config.complete = isFunction(_config.complete);\n\t\t\t_config.error = isFunction(_config.error);\n\t\t\tdelete _config.worker;\t// prevent infinite loop\n\n\t\t\tw.postMessage({\n\t\t\t\tinput: _input,\n\t\t\t\tconfig: _config,\n\t\t\t\tworkerId: w.id\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\tvar streamer = null;\n\t\tif (_input === Papa.NODE_STREAM_INPUT && typeof PAPA_BROWSER_CONTEXT === 'undefined')\n\t\t{\n\t\t\t// create a node Duplex stream for use\n\t\t\t// with .pipe\n\t\t\tstreamer = new DuplexStreamStreamer(_config);\n\t\t\treturn streamer.getStream();\n\t\t}\n\t\telse if (typeof _input === 'string')\n\t\t{\n\t\t\t_input = stripBom(_input);\n\t\t\tif (_config.download)\n\t\t\t\tstreamer = new NetworkStreamer(_config);\n\t\t\telse\n\t\t\t\tstreamer = new StringStreamer(_config);\n\t\t}\n\t\telse if (_input.readable === true && isFunction(_input.read) && isFunction(_input.on))\n\t\t{\n\t\t\tstreamer = new ReadableStreamStreamer(_config);\n\t\t}\n\t\telse if ((global.File && _input instanceof File) || _input instanceof Object)\t// ...Safari. (see issue #106)\n\t\t\tstreamer = new FileStreamer(_config);\n\n\t\treturn streamer.stream(_input);\n\n\t\t// Strip character from UTF-8 BOM encoded files that cause issue parsing the file\n\t\tfunction stripBom(string) {\n\t\t\tif (string.charCodeAt(0) === 0xfeff) {\n\t\t\t\treturn string.slice(1);\n\t\t\t}\n\t\t\treturn string;\n\t\t}\n\t}\n\n\n\n\n\n\n\tfunction JsonToCsv(_input, _config)\n\t{\n\t\t// Default configuration\n\n\t\t/** whether to surround every datum with quotes */\n\t\tvar _quotes = false;\n\n\t\t/** whether to write headers */\n\t\tvar _writeHeader = true;\n\n\t\t/** delimiting character(s) */\n\t\tvar _delimiter = ',';\n\n\t\t/** newline character(s) */\n\t\tvar _newline = '\\r\\n';\n\n\t\t/** quote character */\n\t\tvar _quoteChar = '\"';\n\n\t\t/** escaped quote character, either \"\" or <config.escapeChar>\" */\n\t\tvar _escapedQuote = _quoteChar + _quoteChar;\n\n\t\t/** whether to skip empty lines */\n\t\tvar _skipEmptyLines = false;\n\n\t\t/** the columns (keys) we expect when we unparse objects */\n\t\tvar _columns = null;\n\n\t\t/** whether to prevent outputting cells that can be parsed as formulae by spreadsheet software (Excel and LibreOffice) */\n\t\tvar _escapeFormulae = false;\n\n\t\tunpackConfig();\n\n\t\tvar quoteCharRegex = new RegExp(escapeRegExp(_quoteChar), 'g');\n\n\t\tif (typeof _input === 'string')\n\t\t\t_input = JSON.parse(_input);\n\n\t\tif (Array.isArray(_input))\n\t\t{\n\t\t\tif (!_input.length || Array.isArray(_input[0]))\n\t\t\t\treturn serialize(null, _input, _skipEmptyLines);\n\t\t\telse if (typeof _input[0] === 'object')\n\t\t\t\treturn serialize(_columns || Object.keys(_input[0]), _input, _skipEmptyLines);\n\t\t}\n\t\telse if (typeof _input === 'object')\n\t\t{\n\t\t\tif (typeof _input.data === 'string')\n\t\t\t\t_input.data = JSON.parse(_input.data);\n\n\t\t\tif (Array.isArray(_input.data))\n\t\t\t{\n\t\t\t\tif (!_input.fields)\n\t\t\t\t\t_input.fields = _input.meta && _input.meta.fields || _columns;\n\n\t\t\t\tif (!_input.fields)\n\t\t\t\t\t_input.fields =  Array.isArray(_input.data[0])\n\t\t\t\t\t\t? _input.fields\n\t\t\t\t\t\t: typeof _input.data[0] === 'object'\n\t\t\t\t\t\t\t? Object.keys(_input.data[0])\n\t\t\t\t\t\t\t: [];\n\n\t\t\t\tif (!(Array.isArray(_input.data[0])) && typeof _input.data[0] !== 'object')\n\t\t\t\t\t_input.data = [_input.data];\t// handles input like [1,2,3] or ['asdf']\n\t\t\t}\n\n\t\t\treturn serialize(_input.fields || [], _input.data || [], _skipEmptyLines);\n\t\t}\n\n\t\t// Default (any valid paths should return before this)\n\t\tthrow new Error('Unable to serialize unrecognized input');\n\n\n\t\tfunction unpackConfig()\n\t\t{\n\t\t\tif (typeof _config !== 'object')\n\t\t\t\treturn;\n\n\t\t\tif (typeof _config.delimiter === 'string'\n                && !Papa.BAD_DELIMITERS.filter(function(value) { return _config.delimiter.indexOf(value) !== -1; }).length)\n\t\t\t{\n\t\t\t\t_delimiter = _config.delimiter;\n\t\t\t}\n\n\t\t\tif (typeof _config.quotes === 'boolean'\n\t\t\t\t|| typeof _config.quotes === 'function'\n\t\t\t\t|| Array.isArray(_config.quotes))\n\t\t\t\t_quotes = _config.quotes;\n\n\t\t\tif (typeof _config.skipEmptyLines === 'boolean'\n\t\t\t\t|| typeof _config.skipEmptyLines === 'string')\n\t\t\t\t_skipEmptyLines = _config.skipEmptyLines;\n\n\t\t\tif (typeof _config.newline === 'string')\n\t\t\t\t_newline = _config.newline;\n\n\t\t\tif (typeof _config.quoteChar === 'string')\n\t\t\t\t_quoteChar = _config.quoteChar;\n\n\t\t\tif (typeof _config.header === 'boolean')\n\t\t\t\t_writeHeader = _config.header;\n\n\t\t\tif (Array.isArray(_config.columns)) {\n\n\t\t\t\tif (_config.columns.length === 0) throw new Error('Option columns is empty');\n\n\t\t\t\t_columns = _config.columns;\n\t\t\t}\n\n\t\t\tif (_config.escapeChar !== undefined) {\n\t\t\t\t_escapedQuote = _config.escapeChar + _quoteChar;\n\t\t\t}\n\n\t\t\tif (_config.escapeFormulae instanceof RegExp) {\n\t\t\t\t_escapeFormulae = _config.escapeFormulae;\n\t\t\t} else if (typeof _config.escapeFormulae === 'boolean' && _config.escapeFormulae) {\n\t\t\t\t_escapeFormulae =  /^[=+\\-@\\t\\r].*$/;\n\t\t\t}\n\t\t}\n\n\t\t/** The double for loop that iterates the data and writes out a CSV string including header row */\n\t\tfunction serialize(fields, data, skipEmptyLines)\n\t\t{\n\t\t\tvar csv = '';\n\n\t\t\tif (typeof fields === 'string')\n\t\t\t\tfields = JSON.parse(fields);\n\t\t\tif (typeof data === 'string')\n\t\t\t\tdata = JSON.parse(data);\n\n\t\t\tvar hasHeader = Array.isArray(fields) && fields.length > 0;\n\t\t\tvar dataKeyedByField = !(Array.isArray(data[0]));\n\n\t\t\t// If there a header row, write it first\n\t\t\tif (hasHeader && _writeHeader)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < fields.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (i > 0)\n\t\t\t\t\t\tcsv += _delimiter;\n\t\t\t\t\tcsv += safe(fields[i], i);\n\t\t\t\t}\n\t\t\t\tif (data.length > 0)\n\t\t\t\t\tcsv += _newline;\n\t\t\t}\n\n\t\t\t// Then write out the data\n\t\t\tfor (var row = 0; row < data.length; row++)\n\t\t\t{\n\t\t\t\tvar maxCol = hasHeader ? fields.length : data[row].length;\n\n\t\t\t\tvar emptyLine = false;\n\t\t\t\tvar nullLine = hasHeader ? Object.keys(data[row]).length === 0 : data[row].length === 0;\n\t\t\t\tif (skipEmptyLines && !hasHeader)\n\t\t\t\t{\n\t\t\t\t\temptyLine = skipEmptyLines === 'greedy' ? data[row].join('').trim() === '' : data[row].length === 1 && data[row][0].length === 0;\n\t\t\t\t}\n\t\t\t\tif (skipEmptyLines === 'greedy' && hasHeader) {\n\t\t\t\t\tvar line = [];\n\t\t\t\t\tfor (var c = 0; c < maxCol; c++) {\n\t\t\t\t\t\tvar cx = dataKeyedByField ? fields[c] : c;\n\t\t\t\t\t\tline.push(data[row][cx]);\n\t\t\t\t\t}\n\t\t\t\t\temptyLine = line.join('').trim() === '';\n\t\t\t\t}\n\t\t\t\tif (!emptyLine)\n\t\t\t\t{\n\t\t\t\t\tfor (var col = 0; col < maxCol; col++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (col > 0 && !nullLine)\n\t\t\t\t\t\t\tcsv += _delimiter;\n\t\t\t\t\t\tvar colIdx = hasHeader && dataKeyedByField ? fields[col] : col;\n\t\t\t\t\t\tcsv += safe(data[row][colIdx], col);\n\t\t\t\t\t}\n\t\t\t\t\tif (row < data.length - 1 && (!skipEmptyLines || (maxCol > 0 && !nullLine)))\n\t\t\t\t\t{\n\t\t\t\t\t\tcsv += _newline;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn csv;\n\t\t}\n\n\t\t/** Encloses a value around quotes if needed (makes a value safe for CSV insertion) */\n\t\tfunction safe(str, col)\n\t\t{\n\t\t\tif (typeof str === 'undefined' || str === null)\n\t\t\t\treturn '';\n\n\t\t\tif (str.constructor === Date)\n\t\t\t\treturn JSON.stringify(str).slice(1, 25);\n\n\t\t\tvar needsQuotes = false;\n\n\t\t\tif (_escapeFormulae && typeof str === \"string\" && _escapeFormulae.test(str)) {\n\t\t\t\tstr = \"'\" + str;\n\t\t\t\tneedsQuotes = true;\n\t\t\t}\n\n\t\t\tvar escapedQuoteStr = str.toString().replace(quoteCharRegex, _escapedQuote);\n\n\t\t\tneedsQuotes = needsQuotes\n\t\t\t\t\t\t\t|| _quotes === true\n\t\t\t\t\t\t\t|| (typeof _quotes === 'function' && _quotes(str, col))\n\t\t\t\t\t\t\t|| (Array.isArray(_quotes) && _quotes[col])\n\t\t\t\t\t\t\t|| hasAny(escapedQuoteStr, Papa.BAD_DELIMITERS)\n\t\t\t\t\t\t\t|| escapedQuoteStr.indexOf(_delimiter) > -1\n\t\t\t\t\t\t\t|| escapedQuoteStr.charAt(0) === ' '\n\t\t\t\t\t\t\t|| escapedQuoteStr.charAt(escapedQuoteStr.length - 1) === ' ';\n\n\t\t\treturn needsQuotes ? _quoteChar + escapedQuoteStr + _quoteChar : escapedQuoteStr;\n\t\t}\n\n\t\tfunction hasAny(str, substrings)\n\t\t{\n\t\t\tfor (var i = 0; i < substrings.length; i++)\n\t\t\t\tif (str.indexOf(substrings[i]) > -1)\n\t\t\t\t\treturn true;\n\t\t\treturn false;\n\t\t}\n\t}\n\n\n\t/** ChunkStreamer is the base prototype for various streamer implementations. */\n\tfunction ChunkStreamer(config)\n\t{\n\t\tthis._handle = null;\n\t\tthis._finished = false;\n\t\tthis._completed = false;\n\t\tthis._halted = false;\n\t\tthis._input = null;\n\t\tthis._baseIndex = 0;\n\t\tthis._partialLine = '';\n\t\tthis._rowCount = 0;\n\t\tthis._start = 0;\n\t\tthis._nextChunk = null;\n\t\tthis.isFirstChunk = true;\n\t\tthis._completeResults = {\n\t\t\tdata: [],\n\t\t\terrors: [],\n\t\t\tmeta: {}\n\t\t};\n\t\treplaceConfig.call(this, config);\n\n\t\tthis.parseChunk = function(chunk, isFakeChunk)\n\t\t{\n\t\t\t// First chunk pre-processing\n\t\t\tconst skipFirstNLines = parseInt(this._config.skipFirstNLines) || 0;\n\t\t\tif (this.isFirstChunk && skipFirstNLines > 0) {\n\t\t\t\tlet _newline = this._config.newline;\n\t\t\t\tif (!_newline) {\n\t\t\t\t\tconst quoteChar = this._config.quoteChar || '\"';\n\t\t\t\t\t_newline = this._handle.guessLineEndings(chunk, quoteChar);\n\t\t\t\t}\n\t\t\t\tconst splitChunk = chunk.split(_newline);\n\t\t\t\tchunk = [...splitChunk.slice(skipFirstNLines)].join(_newline);\n\t\t\t}\n\t\t\tif (this.isFirstChunk && isFunction(this._config.beforeFirstChunk))\n\t\t\t{\n\t\t\t\tvar modifiedChunk = this._config.beforeFirstChunk(chunk);\n\t\t\t\tif (modifiedChunk !== undefined)\n\t\t\t\t\tchunk = modifiedChunk;\n\t\t\t}\n\t\t\tthis.isFirstChunk = false;\n\t\t\tthis._halted = false;\n\n\t\t\t// Rejoin the line we likely just split in two by chunking the file\n\t\t\tvar aggregate = this._partialLine + chunk;\n\t\t\tthis._partialLine = '';\n\t\t\tvar results = this._handle.parse(aggregate, this._baseIndex, !this._finished);\n\n\t\t\tif (this._handle.paused() || this._handle.aborted()) {\n\t\t\t\tthis._halted = true;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar lastIndex = results.meta.cursor;\n\n\t\t\tif (!this._finished)\n\t\t\t{\n\t\t\t\tthis._partialLine = aggregate.substring(lastIndex - this._baseIndex);\n\t\t\t\tthis._baseIndex = lastIndex;\n\t\t\t}\n\n\t\t\tif (results && results.data)\n\t\t\t\tthis._rowCount += results.data.length;\n\n\t\t\tvar finishedIncludingPreview = this._finished || (this._config.preview && this._rowCount >= this._config.preview);\n\n\t\t\tif (IS_PAPA_WORKER)\n\t\t\t{\n\t\t\t\tglobal.postMessage({\n\t\t\t\t\tresults: results,\n\t\t\t\t\tworkerId: Papa.WORKER_ID,\n\t\t\t\t\tfinished: finishedIncludingPreview\n\t\t\t\t});\n\t\t\t}\n\t\t\telse if (isFunction(this._config.chunk) && !isFakeChunk)\n\t\t\t{\n\t\t\t\tthis._config.chunk(results, this._handle);\n\t\t\t\tif (this._handle.paused() || this._handle.aborted()) {\n\t\t\t\t\tthis._halted = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresults = undefined;\n\t\t\t\tthis._completeResults = undefined;\n\t\t\t}\n\n\t\t\tif (!this._config.step && !this._config.chunk) {\n\t\t\t\tthis._completeResults.data = this._completeResults.data.concat(results.data);\n\t\t\t\tthis._completeResults.errors = this._completeResults.errors.concat(results.errors);\n\t\t\t\tthis._completeResults.meta = results.meta;\n\t\t\t}\n\n\t\t\tif (!this._completed && finishedIncludingPreview && isFunction(this._config.complete) && (!results || !results.meta.aborted)) {\n\t\t\t\tthis._config.complete(this._completeResults, this._input);\n\t\t\t\tthis._completed = true;\n\t\t\t}\n\n\t\t\tif (!finishedIncludingPreview && (!results || !results.meta.paused))\n\t\t\t\tthis._nextChunk();\n\n\t\t\treturn results;\n\t\t};\n\n\t\tthis._sendError = function(error)\n\t\t{\n\t\t\tif (isFunction(this._config.error))\n\t\t\t\tthis._config.error(error);\n\t\t\telse if (IS_PAPA_WORKER && this._config.error)\n\t\t\t{\n\t\t\t\tglobal.postMessage({\n\t\t\t\t\tworkerId: Papa.WORKER_ID,\n\t\t\t\t\terror: error,\n\t\t\t\t\tfinished: false\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tfunction replaceConfig(config)\n\t\t{\n\t\t\t// Deep-copy the config so we can edit it\n\t\t\tvar configCopy = copy(config);\n\t\t\tconfigCopy.chunkSize = parseInt(configCopy.chunkSize);\t// parseInt VERY important so we don't concatenate strings!\n\t\t\tif (!config.step && !config.chunk)\n\t\t\t\tconfigCopy.chunkSize = null;  // disable Range header if not streaming; bad values break IIS - see issue #196\n\t\t\tthis._handle = new ParserHandle(configCopy);\n\t\t\tthis._handle.streamer = this;\n\t\t\tthis._config = configCopy;\t// persist the copy to the caller\n\t\t}\n\t}\n\n\n\tfunction NetworkStreamer(config)\n\t{\n\t\tconfig = config || {};\n\t\tif (!config.chunkSize)\n\t\t\tconfig.chunkSize = Papa.RemoteChunkSize;\n\t\tChunkStreamer.call(this, config);\n\n\t\tvar xhr;\n\n\t\tif (IS_WORKER)\n\t\t{\n\t\t\tthis._nextChunk = function()\n\t\t\t{\n\t\t\t\tthis._readChunk();\n\t\t\t\tthis._chunkLoaded();\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis._nextChunk = function()\n\t\t\t{\n\t\t\t\tthis._readChunk();\n\t\t\t};\n\t\t}\n\n\t\tthis.stream = function(url)\n\t\t{\n\t\t\tthis._input = url;\n\t\t\tthis._nextChunk();\t// Starts streaming\n\t\t};\n\n\t\tthis._readChunk = function()\n\t\t{\n\t\t\tif (this._finished)\n\t\t\t{\n\t\t\t\tthis._chunkLoaded();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\txhr = new XMLHttpRequest();\n\n\t\t\tif (this._config.withCredentials)\n\t\t\t{\n\t\t\t\txhr.withCredentials = this._config.withCredentials;\n\t\t\t}\n\n\t\t\tif (!IS_WORKER)\n\t\t\t{\n\t\t\t\txhr.onload = bindFunction(this._chunkLoaded, this);\n\t\t\t\txhr.onerror = bindFunction(this._chunkError, this);\n\t\t\t}\n\n\t\t\txhr.open(this._config.downloadRequestBody ? 'POST' : 'GET', this._input, !IS_WORKER);\n\t\t\t// Headers can only be set when once the request state is OPENED\n\t\t\tif (this._config.downloadRequestHeaders)\n\t\t\t{\n\t\t\t\tvar headers = this._config.downloadRequestHeaders;\n\n\t\t\t\tfor (var headerName in headers)\n\t\t\t\t{\n\t\t\t\t\txhr.setRequestHeader(headerName, headers[headerName]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this._config.chunkSize)\n\t\t\t{\n\t\t\t\tvar end = this._start + this._config.chunkSize - 1;\t// minus one because byte range is inclusive\n\t\t\t\txhr.setRequestHeader('Range', 'bytes=' + this._start + '-' + end);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\txhr.send(this._config.downloadRequestBody);\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\tthis._chunkError(err.message);\n\t\t\t}\n\n\t\t\tif (IS_WORKER && xhr.status === 0)\n\t\t\t\tthis._chunkError();\n\t\t};\n\n\t\tthis._chunkLoaded = function()\n\t\t{\n\t\t\tif (xhr.readyState !== 4)\n\t\t\t\treturn;\n\n\t\t\tif (xhr.status < 200 || xhr.status >= 400)\n\t\t\t{\n\t\t\t\tthis._chunkError();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Use chunckSize as it may be a diference on reponse lentgh due to characters with more than 1 byte\n\t\t\tthis._start += this._config.chunkSize ? this._config.chunkSize : xhr.responseText.length;\n\t\t\tthis._finished = !this._config.chunkSize || this._start >= getFileSize(xhr);\n\t\t\tthis.parseChunk(xhr.responseText);\n\t\t};\n\n\t\tthis._chunkError = function(errorMessage)\n\t\t{\n\t\t\tvar errorText = xhr.statusText || errorMessage;\n\t\t\tthis._sendError(new Error(errorText));\n\t\t};\n\n\t\tfunction getFileSize(xhr)\n\t\t{\n\t\t\tvar contentRange = xhr.getResponseHeader('Content-Range');\n\t\t\tif (contentRange === null) { // no content range, then finish!\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn parseInt(contentRange.substring(contentRange.lastIndexOf('/') + 1));\n\t\t}\n\t}\n\tNetworkStreamer.prototype = Object.create(ChunkStreamer.prototype);\n\tNetworkStreamer.prototype.constructor = NetworkStreamer;\n\n\n\tfunction FileStreamer(config)\n\t{\n\t\tconfig = config || {};\n\t\tif (!config.chunkSize)\n\t\t\tconfig.chunkSize = Papa.LocalChunkSize;\n\t\tChunkStreamer.call(this, config);\n\n\t\tvar reader, slice;\n\n\t\t// FileReader is better than FileReaderSync (even in worker) - see http://stackoverflow.com/q/24708649/1048862\n\t\t// But Firefox is a pill, too - see issue #76: https://github.com/mholt/PapaParse/issues/76\n\t\tvar usingAsyncReader = typeof FileReader !== 'undefined';\t// Safari doesn't consider it a function - see issue #105\n\n\t\tthis.stream = function(file)\n\t\t{\n\t\t\tthis._input = file;\n\t\t\tslice = file.slice || file.webkitSlice || file.mozSlice;\n\n\t\t\tif (usingAsyncReader)\n\t\t\t{\n\t\t\t\treader = new FileReader();\t\t// Preferred method of reading files, even in workers\n\t\t\t\treader.onload = bindFunction(this._chunkLoaded, this);\n\t\t\t\treader.onerror = bindFunction(this._chunkError, this);\n\t\t\t}\n\t\t\telse\n\t\t\t\treader = new FileReaderSync();\t// Hack for running in a web worker in Firefox\n\n\t\t\tthis._nextChunk();\t// Starts streaming\n\t\t};\n\n\t\tthis._nextChunk = function()\n\t\t{\n\t\t\tif (!this._finished && (!this._config.preview || this._rowCount < this._config.preview))\n\t\t\t\tthis._readChunk();\n\t\t};\n\n\t\tthis._readChunk = function()\n\t\t{\n\t\t\tvar input = this._input;\n\t\t\tif (this._config.chunkSize)\n\t\t\t{\n\t\t\t\tvar end = Math.min(this._start + this._config.chunkSize, this._input.size);\n\t\t\t\tinput = slice.call(input, this._start, end);\n\t\t\t}\n\t\t\tvar txt = reader.readAsText(input, this._config.encoding);\n\t\t\tif (!usingAsyncReader)\n\t\t\t\tthis._chunkLoaded({ target: { result: txt } });\t// mimic the async signature\n\t\t};\n\n\t\tthis._chunkLoaded = function(event)\n\t\t{\n\t\t\t// Very important to increment start each time before handling results\n\t\t\tthis._start += this._config.chunkSize;\n\t\t\tthis._finished = !this._config.chunkSize || this._start >= this._input.size;\n\t\t\tthis.parseChunk(event.target.result);\n\t\t};\n\n\t\tthis._chunkError = function()\n\t\t{\n\t\t\tthis._sendError(reader.error);\n\t\t};\n\n\t}\n\tFileStreamer.prototype = Object.create(ChunkStreamer.prototype);\n\tFileStreamer.prototype.constructor = FileStreamer;\n\n\n\tfunction StringStreamer(config)\n\t{\n\t\tconfig = config || {};\n\t\tChunkStreamer.call(this, config);\n\n\t\tvar remaining;\n\t\tthis.stream = function(s)\n\t\t{\n\t\t\tremaining = s;\n\t\t\treturn this._nextChunk();\n\t\t};\n\t\tthis._nextChunk = function()\n\t\t{\n\t\t\tif (this._finished) return;\n\t\t\tvar size = this._config.chunkSize;\n\t\t\tvar chunk;\n\t\t\tif(size) {\n\t\t\t\tchunk = remaining.substring(0, size);\n\t\t\t\tremaining = remaining.substring(size);\n\t\t\t} else {\n\t\t\t\tchunk = remaining;\n\t\t\t\tremaining = '';\n\t\t\t}\n\t\t\tthis._finished = !remaining;\n\t\t\treturn this.parseChunk(chunk);\n\t\t};\n\t}\n\tStringStreamer.prototype = Object.create(StringStreamer.prototype);\n\tStringStreamer.prototype.constructor = StringStreamer;\n\n\n\tfunction ReadableStreamStreamer(config)\n\t{\n\t\tconfig = config || {};\n\n\t\tChunkStreamer.call(this, config);\n\n\t\tvar queue = [];\n\t\tvar parseOnData = true;\n\t\tvar streamHasEnded = false;\n\n\t\tthis.pause = function()\n\t\t{\n\t\t\tChunkStreamer.prototype.pause.apply(this, arguments);\n\t\t\tthis._input.pause();\n\t\t};\n\n\t\tthis.resume = function()\n\t\t{\n\t\t\tChunkStreamer.prototype.resume.apply(this, arguments);\n\t\t\tthis._input.resume();\n\t\t};\n\n\t\tthis.stream = function(stream)\n\t\t{\n\t\t\tthis._input = stream;\n\n\t\t\tthis._input.on('data', this._streamData);\n\t\t\tthis._input.on('end', this._streamEnd);\n\t\t\tthis._input.on('error', this._streamError);\n\t\t};\n\n\t\tthis._checkIsFinished = function()\n\t\t{\n\t\t\tif (streamHasEnded && queue.length === 1) {\n\t\t\t\tthis._finished = true;\n\t\t\t}\n\t\t};\n\n\t\tthis._nextChunk = function()\n\t\t{\n\t\t\tthis._checkIsFinished();\n\t\t\tif (queue.length)\n\t\t\t{\n\t\t\t\tthis.parseChunk(queue.shift());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tparseOnData = true;\n\t\t\t}\n\t\t};\n\n\t\tthis._streamData = bindFunction(function(chunk)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tqueue.push(typeof chunk === 'string' ? chunk : chunk.toString(this._config.encoding));\n\n\t\t\t\tif (parseOnData)\n\t\t\t\t{\n\t\t\t\t\tparseOnData = false;\n\t\t\t\t\tthis._checkIsFinished();\n\t\t\t\t\tthis.parseChunk(queue.shift());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (error)\n\t\t\t{\n\t\t\t\tthis._streamError(error);\n\t\t\t}\n\t\t}, this);\n\n\t\tthis._streamError = bindFunction(function(error)\n\t\t{\n\t\t\tthis._streamCleanUp();\n\t\t\tthis._sendError(error);\n\t\t}, this);\n\n\t\tthis._streamEnd = bindFunction(function()\n\t\t{\n\t\t\tthis._streamCleanUp();\n\t\t\tstreamHasEnded = true;\n\t\t\tthis._streamData('');\n\t\t}, this);\n\n\t\tthis._streamCleanUp = bindFunction(function()\n\t\t{\n\t\t\tthis._input.removeListener('data', this._streamData);\n\t\t\tthis._input.removeListener('end', this._streamEnd);\n\t\t\tthis._input.removeListener('error', this._streamError);\n\t\t}, this);\n\t}\n\tReadableStreamStreamer.prototype = Object.create(ChunkStreamer.prototype);\n\tReadableStreamStreamer.prototype.constructor = ReadableStreamStreamer;\n\n\n\tfunction DuplexStreamStreamer(_config) {\n\t\tvar Duplex = require('stream').Duplex;\n\t\tvar config = copy(_config);\n\t\tvar parseOnWrite = true;\n\t\tvar writeStreamHasFinished = false;\n\t\tvar parseCallbackQueue = [];\n\t\tvar stream = null;\n\n\t\tthis._onCsvData = function(results)\n\t\t{\n\t\t\tvar data = results.data;\n\t\t\tif (!stream.push(data) && !this._handle.paused()) {\n\t\t\t\t// the writeable consumer buffer has filled up\n\t\t\t\t// so we need to pause until more items\n\t\t\t\t// can be processed\n\t\t\t\tthis._handle.pause();\n\t\t\t}\n\t\t};\n\n\t\tthis._onCsvComplete = function()\n\t\t{\n\t\t\t// node will finish the read stream when\n\t\t\t// null is pushed\n\t\t\tstream.push(null);\n\t\t};\n\n\t\tconfig.step = bindFunction(this._onCsvData, this);\n\t\tconfig.complete = bindFunction(this._onCsvComplete, this);\n\t\tChunkStreamer.call(this, config);\n\n\t\tthis._nextChunk = function()\n\t\t{\n\t\t\tif (writeStreamHasFinished && parseCallbackQueue.length === 1) {\n\t\t\t\tthis._finished = true;\n\t\t\t}\n\t\t\tif (parseCallbackQueue.length) {\n\t\t\t\tparseCallbackQueue.shift()();\n\t\t\t} else {\n\t\t\t\tparseOnWrite = true;\n\t\t\t}\n\t\t};\n\n\t\tthis._addToParseQueue = function(chunk, callback)\n\t\t{\n\t\t\t// add to queue so that we can indicate\n\t\t\t// completion via callback\n\t\t\t// node will automatically pause the incoming stream\n\t\t\t// when too many items have been added without their\n\t\t\t// callback being invoked\n\t\t\tparseCallbackQueue.push(bindFunction(function() {\n\t\t\t\tthis.parseChunk(typeof chunk === 'string' ? chunk : chunk.toString(config.encoding));\n\t\t\t\tif (isFunction(callback)) {\n\t\t\t\t\treturn callback();\n\t\t\t\t}\n\t\t\t}, this));\n\t\t\tif (parseOnWrite) {\n\t\t\t\tparseOnWrite = false;\n\t\t\t\tthis._nextChunk();\n\t\t\t}\n\t\t};\n\n\t\tthis._onRead = function()\n\t\t{\n\t\t\tif (this._handle.paused()) {\n\t\t\t\t// the writeable consumer can handle more data\n\t\t\t\t// so resume the chunk parsing\n\t\t\t\tthis._handle.resume();\n\t\t\t}\n\t\t};\n\n\t\tthis._onWrite = function(chunk, encoding, callback)\n\t\t{\n\t\t\tthis._addToParseQueue(chunk, callback);\n\t\t};\n\n\t\tthis._onWriteComplete = function()\n\t\t{\n\t\t\twriteStreamHasFinished = true;\n\t\t\t// have to write empty string\n\t\t\t// so parser knows its done\n\t\t\tthis._addToParseQueue('');\n\t\t};\n\n\t\tthis.getStream = function()\n\t\t{\n\t\t\treturn stream;\n\t\t};\n\t\tstream = new Duplex({\n\t\t\treadableObjectMode: true,\n\t\t\tdecodeStrings: false,\n\t\t\tread: bindFunction(this._onRead, this),\n\t\t\twrite: bindFunction(this._onWrite, this)\n\t\t});\n\t\tstream.once('finish', bindFunction(this._onWriteComplete, this));\n\t}\n\tif (typeof PAPA_BROWSER_CONTEXT === 'undefined') {\n\t\tDuplexStreamStreamer.prototype = Object.create(ChunkStreamer.prototype);\n\t\tDuplexStreamStreamer.prototype.constructor = DuplexStreamStreamer;\n\t}\n\n\n\t// Use one ParserHandle per entire CSV file or string\n\tfunction ParserHandle(_config)\n\t{\n\t\t// One goal is to minimize the use of regular expressions...\n\t\tvar MAX_FLOAT = Math.pow(2, 53);\n\t\tvar MIN_FLOAT = -MAX_FLOAT;\n\t\tvar FLOAT = /^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)([eE][-+]?\\d+)?\\s*$/;\n\t\tvar ISO_DATE = /^((\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z)))$/;\n\t\tvar self = this;\n\t\tvar _stepCounter = 0;\t// Number of times step was called (number of rows parsed)\n\t\tvar _rowCounter = 0;\t// Number of rows that have been parsed so far\n\t\tvar _input;\t\t\t\t// The input being parsed\n\t\tvar _parser;\t\t\t// The core parser being used\n\t\tvar _paused = false;\t// Whether we are paused or not\n\t\tvar _aborted = false;\t// Whether the parser has aborted or not\n\t\tvar _delimiterError;\t// Temporary state between delimiter detection and processing results\n\t\tvar _fields = [];\t\t// Fields are from the header row of the input, if there is one\n\t\tvar _results = {\t\t// The last results returned from the parser\n\t\t\tdata: [],\n\t\t\terrors: [],\n\t\t\tmeta: {}\n\t\t};\n\n\t\tif (isFunction(_config.step))\n\t\t{\n\t\t\tvar userStep = _config.step;\n\t\t\t_config.step = function(results)\n\t\t\t{\n\t\t\t\t_results = results;\n\n\t\t\t\tif (needsHeaderRow())\n\t\t\t\t\tprocessResults();\n\t\t\t\telse\t// only call user's step function after header row\n\t\t\t\t{\n\t\t\t\t\tprocessResults();\n\n\t\t\t\t\t// It's possbile that this line was empty and there's no row here after all\n\t\t\t\t\tif (_results.data.length === 0)\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t_stepCounter += results.data.length;\n\t\t\t\t\tif (_config.preview && _stepCounter > _config.preview)\n\t\t\t\t\t\t_parser.abort();\n\t\t\t\t\telse {\n\t\t\t\t\t\t_results.data = _results.data[0];\n\t\t\t\t\t\tuserStep(_results, self);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * Parses input. Most users won't need, and shouldn't mess with, the baseIndex\n\t\t * and ignoreLastRow parameters. They are used by streamers (wrapper functions)\n\t\t * when an input comes in multiple chunks, like from a file.\n\t\t */\n\t\tthis.parse = function(input, baseIndex, ignoreLastRow)\n\t\t{\n\t\t\tvar quoteChar = _config.quoteChar || '\"';\n\t\t\tif (!_config.newline)\n\t\t\t\t_config.newline = this.guessLineEndings(input, quoteChar);\n\n\t\t\t_delimiterError = false;\n\t\t\tif (!_config.delimiter)\n\t\t\t{\n\t\t\t\tvar delimGuess = guessDelimiter(input, _config.newline, _config.skipEmptyLines, _config.comments, _config.delimitersToGuess);\n\t\t\t\tif (delimGuess.successful)\n\t\t\t\t\t_config.delimiter = delimGuess.bestDelimiter;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t_delimiterError = true;\t// add error after parsing (otherwise it would be overwritten)\n\t\t\t\t\t_config.delimiter = Papa.DefaultDelimiter;\n\t\t\t\t}\n\t\t\t\t_results.meta.delimiter = _config.delimiter;\n\t\t\t}\n\t\t\telse if(isFunction(_config.delimiter))\n\t\t\t{\n\t\t\t\t_config.delimiter = _config.delimiter(input);\n\t\t\t\t_results.meta.delimiter = _config.delimiter;\n\t\t\t}\n\n\t\t\tvar parserConfig = copy(_config);\n\t\t\tif (_config.preview && _config.header)\n\t\t\t\tparserConfig.preview++;\t// to compensate for header row\n\n\t\t\t_input = input;\n\t\t\t_parser = new Parser(parserConfig);\n\t\t\t_results = _parser.parse(_input, baseIndex, ignoreLastRow);\n\t\t\tprocessResults();\n\t\t\treturn _paused ? { meta: { paused: true } } : (_results || { meta: { paused: false } });\n\t\t};\n\n\t\tthis.paused = function()\n\t\t{\n\t\t\treturn _paused;\n\t\t};\n\n\t\tthis.pause = function()\n\t\t{\n\t\t\t_paused = true;\n\t\t\t_parser.abort();\n\n\t\t\t// If it is streaming via \"chunking\", the reader will start appending correctly already so no need to substring,\n\t\t\t// otherwise we can get duplicate content within a row\n\t\t\t_input = isFunction(_config.chunk) ? \"\" : _input.substring(_parser.getCharIndex());\n\t\t};\n\n\t\tthis.resume = function()\n\t\t{\n\t\t\tif(self.streamer._halted) {\n\t\t\t\t_paused = false;\n\t\t\t\tself.streamer.parseChunk(_input, true);\n\t\t\t} else {\n\t\t\t\t// Bugfix: #636 In case the processing hasn't halted yet\n\t\t\t\t// wait for it to halt in order to resume\n\t\t\t\tsetTimeout(self.resume, 3);\n\t\t\t}\n\t\t};\n\n\t\tthis.aborted = function()\n\t\t{\n\t\t\treturn _aborted;\n\t\t};\n\n\t\tthis.abort = function()\n\t\t{\n\t\t\t_aborted = true;\n\t\t\t_parser.abort();\n\t\t\t_results.meta.aborted = true;\n\t\t\tif (isFunction(_config.complete))\n\t\t\t\t_config.complete(_results);\n\t\t\t_input = '';\n\t\t};\n\n\t\tthis.guessLineEndings = function(input, quoteChar)\n\t\t{\n\t\t\tinput = input.substring(0, 1024 * 1024);\t// max length 1 MB\n\t\t\t// Replace all the text inside quotes\n\t\t\tvar re = new RegExp(escapeRegExp(quoteChar) + '([^]*?)' + escapeRegExp(quoteChar), 'gm');\n\t\t\tinput = input.replace(re, '');\n\n\t\t\tvar r = input.split('\\r');\n\n\t\t\tvar n = input.split('\\n');\n\n\t\t\tvar nAppearsFirst = (n.length > 1 && n[0].length < r[0].length);\n\n\t\t\tif (r.length === 1 || nAppearsFirst)\n\t\t\t\treturn '\\n';\n\n\t\t\tvar numWithN = 0;\n\t\t\tfor (var i = 0; i < r.length; i++)\n\t\t\t{\n\t\t\t\tif (r[i][0] === '\\n')\n\t\t\t\t\tnumWithN++;\n\t\t\t}\n\n\t\t\treturn numWithN >= r.length / 2 ? '\\r\\n' : '\\r';\n\t\t};\n\n\t\tfunction testEmptyLine(s) {\n\t\t\treturn _config.skipEmptyLines === 'greedy' ? s.join('').trim() === '' : s.length === 1 && s[0].length === 0;\n\t\t}\n\n\t\tfunction testFloat(s) {\n\t\t\tif (FLOAT.test(s)) {\n\t\t\t\tvar floatValue = parseFloat(s);\n\t\t\t\tif (floatValue > MIN_FLOAT && floatValue < MAX_FLOAT) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction processResults()\n\t\t{\n\t\t\tif (_results && _delimiterError)\n\t\t\t{\n\t\t\t\taddError('Delimiter', 'UndetectableDelimiter', 'Unable to auto-detect delimiting character; defaulted to \\'' + Papa.DefaultDelimiter + '\\'');\n\t\t\t\t_delimiterError = false;\n\t\t\t}\n\n\t\t\tif (_config.skipEmptyLines)\n\t\t\t{\n\t\t\t\t_results.data = _results.data.filter(function(d) {\n\t\t\t\t\treturn !testEmptyLine(d);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (needsHeaderRow())\n\t\t\t\tfillHeaderFields();\n\n\t\t\treturn applyHeaderAndDynamicTypingAndTransformation();\n\t\t}\n\n\t\tfunction needsHeaderRow()\n\t\t{\n\t\t\treturn _config.header && _fields.length === 0;\n\t\t}\n\n\t\tfunction fillHeaderFields()\n\t\t{\n\t\t\tif (!_results)\n\t\t\t\treturn;\n\n\t\t\tfunction addHeader(header, i)\n\t\t\t{\n\t\t\t\tif (isFunction(_config.transformHeader))\n\t\t\t\t\theader = _config.transformHeader(header, i);\n\n\t\t\t\t_fields.push(header);\n\t\t\t}\n\n\t\t\tif (Array.isArray(_results.data[0]))\n\t\t\t{\n\t\t\t\tfor (var i = 0; needsHeaderRow() && i < _results.data.length; i++)\n\t\t\t\t\t_results.data[i].forEach(addHeader);\n\n\t\t\t\t_results.data.splice(0, 1);\n\t\t\t}\n\t\t\t// if _results.data[0] is not an array, we are in a step where _results.data is the row.\n\t\t\telse\n\t\t\t\t_results.data.forEach(addHeader);\n\t\t}\n\n\t\tfunction shouldApplyDynamicTyping(field) {\n\t\t\t// Cache function values to avoid calling it for each row\n\t\t\tif (_config.dynamicTypingFunction && _config.dynamicTyping[field] === undefined) {\n\t\t\t\t_config.dynamicTyping[field] = _config.dynamicTypingFunction(field);\n\t\t\t}\n\t\t\treturn (_config.dynamicTyping[field] || _config.dynamicTyping) === true;\n\t\t}\n\n\t\tfunction parseDynamic(field, value)\n\t\t{\n\t\t\tif (shouldApplyDynamicTyping(field))\n\t\t\t{\n\t\t\t\tif (value === 'true' || value === 'TRUE')\n\t\t\t\t\treturn true;\n\t\t\t\telse if (value === 'false' || value === 'FALSE')\n\t\t\t\t\treturn false;\n\t\t\t\telse if (testFloat(value))\n\t\t\t\t\treturn parseFloat(value);\n\t\t\t\telse if (ISO_DATE.test(value))\n\t\t\t\t\treturn new Date(value);\n\t\t\t\telse\n\t\t\t\t\treturn (value === '' ? null : value);\n\t\t\t}\n\t\t\treturn value;\n\t\t}\n\n\t\tfunction applyHeaderAndDynamicTypingAndTransformation()\n\t\t{\n\t\t\tif (!_results || (!_config.header && !_config.dynamicTyping && !_config.transform))\n\t\t\t\treturn _results;\n\n\t\t\tfunction processRow(rowSource, i)\n\t\t\t{\n\t\t\t\tvar row = _config.header ? {} : [];\n\n\t\t\t\tvar j;\n\t\t\t\tfor (j = 0; j < rowSource.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar field = j;\n\t\t\t\t\tvar value = rowSource[j];\n\n\t\t\t\t\tif (_config.header)\n\t\t\t\t\t\tfield = j >= _fields.length ? '__parsed_extra' : _fields[j];\n\n\t\t\t\t\tif (_config.transform)\n\t\t\t\t\t\tvalue = _config.transform(value,field);\n\n\t\t\t\t\tvalue = parseDynamic(field, value);\n\n\t\t\t\t\tif (field === '__parsed_extra')\n\t\t\t\t\t{\n\t\t\t\t\t\trow[field] = row[field] || [];\n\t\t\t\t\t\trow[field].push(value);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\trow[field] = value;\n\t\t\t\t}\n\n\n\t\t\t\tif (_config.header)\n\t\t\t\t{\n\t\t\t\t\tif (j > _fields.length)\n\t\t\t\t\t\taddError('FieldMismatch', 'TooManyFields', 'Too many fields: expected ' + _fields.length + ' fields but parsed ' + j, _rowCounter + i);\n\t\t\t\t\telse if (j < _fields.length)\n\t\t\t\t\t\taddError('FieldMismatch', 'TooFewFields', 'Too few fields: expected ' + _fields.length + ' fields but parsed ' + j, _rowCounter + i);\n\t\t\t\t}\n\n\t\t\t\treturn row;\n\t\t\t}\n\n\t\t\tvar incrementBy = 1;\n\t\t\tif (!_results.data.length || Array.isArray(_results.data[0]))\n\t\t\t{\n\t\t\t\t_results.data = _results.data.map(processRow);\n\t\t\t\tincrementBy = _results.data.length;\n\t\t\t}\n\t\t\telse\n\t\t\t\t_results.data = processRow(_results.data, 0);\n\n\n\t\t\tif (_config.header && _results.meta)\n\t\t\t\t_results.meta.fields = _fields;\n\n\t\t\t_rowCounter += incrementBy;\n\t\t\treturn _results;\n\t\t}\n\n\t\tfunction guessDelimiter(input, newline, skipEmptyLines, comments, delimitersToGuess) {\n\t\t\tvar bestDelim, bestDelta, fieldCountPrevRow, maxFieldCount;\n\n\t\t\tdelimitersToGuess = delimitersToGuess || [',', '\\t', '|', ';', Papa.RECORD_SEP, Papa.UNIT_SEP];\n\n\t\t\tfor (var i = 0; i < delimitersToGuess.length; i++) {\n\t\t\t\tvar delim = delimitersToGuess[i];\n\t\t\t\tvar delta = 0, avgFieldCount = 0, emptyLinesCount = 0;\n\t\t\t\tfieldCountPrevRow = undefined;\n\n\t\t\t\tvar preview = new Parser({\n\t\t\t\t\tcomments: comments,\n\t\t\t\t\tdelimiter: delim,\n\t\t\t\t\tnewline: newline,\n\t\t\t\t\tpreview: 10\n\t\t\t\t}).parse(input);\n\n\t\t\t\tfor (var j = 0; j < preview.data.length; j++) {\n\t\t\t\t\tif (skipEmptyLines && testEmptyLine(preview.data[j])) {\n\t\t\t\t\t\temptyLinesCount++;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tvar fieldCount = preview.data[j].length;\n\t\t\t\t\tavgFieldCount += fieldCount;\n\n\t\t\t\t\tif (typeof fieldCountPrevRow === 'undefined') {\n\t\t\t\t\t\tfieldCountPrevRow = fieldCount;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\telse if (fieldCount > 0) {\n\t\t\t\t\t\tdelta += Math.abs(fieldCount - fieldCountPrevRow);\n\t\t\t\t\t\tfieldCountPrevRow = fieldCount;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (preview.data.length > 0)\n\t\t\t\t\tavgFieldCount /= (preview.data.length - emptyLinesCount);\n\n\t\t\t\tif ((typeof bestDelta === 'undefined' || delta <= bestDelta)\n\t\t\t\t\t&& (typeof maxFieldCount === 'undefined' || avgFieldCount > maxFieldCount) && avgFieldCount > 1.99) {\n\t\t\t\t\tbestDelta = delta;\n\t\t\t\t\tbestDelim = delim;\n\t\t\t\t\tmaxFieldCount = avgFieldCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_config.delimiter = bestDelim;\n\n\t\t\treturn {\n\t\t\t\tsuccessful: !!bestDelim,\n\t\t\t\tbestDelimiter: bestDelim\n\t\t\t};\n\t\t}\n\n\t\tfunction addError(type, code, msg, row)\n\t\t{\n\t\t\tvar error = {\n\t\t\t\ttype: type,\n\t\t\t\tcode: code,\n\t\t\t\tmessage: msg\n\t\t\t};\n\t\t\tif(row !== undefined) {\n\t\t\t\terror.row = row;\n\t\t\t}\n\t\t\t_results.errors.push(error);\n\t\t}\n\t}\n\n\t/** https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions */\n\tfunction escapeRegExp(string)\n\t{\n\t\treturn string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n\t}\n\n\t/** The core parser implements speedy and correct CSV parsing */\n\tfunction Parser(config)\n\t{\n\t\t// Unpack the config object\n\t\tconfig = config || {};\n\t\tvar delim = config.delimiter;\n\t\tvar newline = config.newline;\n\t\tvar comments = config.comments;\n\t\tvar step = config.step;\n\t\tvar preview = config.preview;\n\t\tvar fastMode = config.fastMode;\n\t\tvar quoteChar;\n\t\tvar renamedHeaders = null;\n\t\tvar headerParsed = false;\n\n\t\tif (config.quoteChar === undefined || config.quoteChar === null) {\n\t\t\tquoteChar = '\"';\n\t\t} else {\n\t\t\tquoteChar = config.quoteChar;\n\t\t}\n\t\tvar escapeChar = quoteChar;\n\t\tif (config.escapeChar !== undefined) {\n\t\t\tescapeChar = config.escapeChar;\n\t\t}\n\n\t\t// Delimiter must be valid\n\t\tif (typeof delim !== 'string'\n\t\t\t|| Papa.BAD_DELIMITERS.indexOf(delim) > -1)\n\t\t\tdelim = ',';\n\n\t\t// Comment character must be valid\n\t\tif (comments === delim)\n\t\t\tthrow new Error('Comment character same as delimiter');\n\t\telse if (comments === true)\n\t\t\tcomments = '#';\n\t\telse if (typeof comments !== 'string'\n\t\t\t|| Papa.BAD_DELIMITERS.indexOf(comments) > -1)\n\t\t\tcomments = false;\n\n\t\t// Newline must be valid: \\r, \\n, or \\r\\n\n\t\tif (newline !== '\\n' && newline !== '\\r' && newline !== '\\r\\n')\n\t\t\tnewline = '\\n';\n\n\t\t// We're gonna need these at the Parser scope\n\t\tvar cursor = 0;\n\t\tvar aborted = false;\n\n\t\tthis.parse = function(input, baseIndex, ignoreLastRow)\n\t\t{\n\t\t\t// For some reason, in Chrome, this speeds things up (!?)\n\t\t\tif (typeof input !== 'string')\n\t\t\t\tthrow new Error('Input must be a string');\n\n\t\t\t// We don't need to compute some of these every time parse() is called,\n\t\t\t// but having them in a more local scope seems to perform better\n\t\t\tvar inputLen = input.length,\n\t\t\t\tdelimLen = delim.length,\n\t\t\t\tnewlineLen = newline.length,\n\t\t\t\tcommentsLen = comments.length;\n\t\t\tvar stepIsFunction = isFunction(step);\n\n\t\t\t// Establish starting state\n\t\t\tcursor = 0;\n\t\t\tvar data = [], errors = [], row = [], lastCursor = 0;\n\n\t\t\tif (!input)\n\t\t\t\treturn returnable();\n\n\t\t\tif (fastMode || (fastMode !== false && input.indexOf(quoteChar) === -1))\n\t\t\t{\n\t\t\t\tvar rows = input.split(newline);\n\t\t\t\tfor (var i = 0; i < rows.length; i++)\n\t\t\t\t{\n\t\t\t\t\trow = rows[i];\n\t\t\t\t\tcursor += row.length;\n\n\t\t\t\t\tif (i !== rows.length - 1)\n\t\t\t\t\t\tcursor += newline.length;\n\t\t\t\t\telse if (ignoreLastRow)\n\t\t\t\t\t\treturn returnable();\n\t\t\t\t\tif (comments && row.substring(0, commentsLen) === comments)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (stepIsFunction)\n\t\t\t\t\t{\n\t\t\t\t\t\tdata = [];\n\t\t\t\t\t\tpushRow(row.split(delim));\n\t\t\t\t\t\tdoStep();\n\t\t\t\t\t\tif (aborted)\n\t\t\t\t\t\t\treturn returnable();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tpushRow(row.split(delim));\n\t\t\t\t\tif (preview && i >= preview)\n\t\t\t\t\t{\n\t\t\t\t\t\tdata = data.slice(0, preview);\n\t\t\t\t\t\treturn returnable(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn returnable();\n\t\t\t}\n\n\t\t\tvar nextDelim = input.indexOf(delim, cursor);\n\t\t\tvar nextNewline = input.indexOf(newline, cursor);\n\t\t\tvar quoteCharRegex = new RegExp(escapeRegExp(escapeChar) + escapeRegExp(quoteChar), 'g');\n\t\t\tvar quoteSearch = input.indexOf(quoteChar, cursor);\n\n\t\t\t// Parser loop\n\t\t\tfor (;;)\n\t\t\t{\n\t\t\t\t// Field has opening quote\n\t\t\t\tif (input[cursor] === quoteChar)\n\t\t\t\t{\n\t\t\t\t\t// Start our search for the closing quote where the cursor is\n\t\t\t\t\tquoteSearch = cursor;\n\n\t\t\t\t\t// Skip the opening quote\n\t\t\t\t\tcursor++;\n\n\t\t\t\t\tfor (;;)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Find closing quote\n\t\t\t\t\t\tquoteSearch = input.indexOf(quoteChar, quoteSearch + 1);\n\n\t\t\t\t\t\t//No other quotes are found - no other delimiters\n\t\t\t\t\t\tif (quoteSearch === -1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!ignoreLastRow) {\n\t\t\t\t\t\t\t\t// No closing quote... what a pity\n\t\t\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\t\t\ttype: 'Quotes',\n\t\t\t\t\t\t\t\t\tcode: 'MissingQuotes',\n\t\t\t\t\t\t\t\t\tmessage: 'Quoted field unterminated',\n\t\t\t\t\t\t\t\t\trow: data.length,\t// row has yet to be inserted\n\t\t\t\t\t\t\t\t\tindex: cursor\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn finish();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Closing quote at EOF\n\t\t\t\t\t\tif (quoteSearch === inputLen - 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar value = input.substring(cursor, quoteSearch).replace(quoteCharRegex, quoteChar);\n\t\t\t\t\t\t\treturn finish(value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If this quote is escaped, it's part of the data; skip it\n\t\t\t\t\t\t// If the quote character is the escape character, then check if the next character is the escape character\n\t\t\t\t\t\tif (quoteChar === escapeChar &&  input[quoteSearch + 1] === escapeChar)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tquoteSearch++;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If the quote character is not the escape character, then check if the previous character was the escape character\n\t\t\t\t\t\tif (quoteChar !== escapeChar && quoteSearch !== 0 && input[quoteSearch - 1] === escapeChar)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(nextDelim !== -1 && nextDelim < (quoteSearch + 1)) {\n\t\t\t\t\t\t\tnextDelim = input.indexOf(delim, (quoteSearch + 1));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(nextNewline !== -1 && nextNewline < (quoteSearch + 1)) {\n\t\t\t\t\t\t\tnextNewline = input.indexOf(newline, (quoteSearch + 1));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Check up to nextDelim or nextNewline, whichever is closest\n\t\t\t\t\t\tvar checkUpTo = nextNewline === -1 ? nextDelim : Math.min(nextDelim, nextNewline);\n\t\t\t\t\t\tvar spacesBetweenQuoteAndDelimiter = extraSpaces(checkUpTo);\n\n\t\t\t\t\t\t// Closing quote followed by delimiter or 'unnecessary spaces + delimiter'\n\t\t\t\t\t\tif (input.substr(quoteSearch + 1 + spacesBetweenQuoteAndDelimiter, delimLen) === delim)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trow.push(input.substring(cursor, quoteSearch).replace(quoteCharRegex, quoteChar));\n\t\t\t\t\t\t\tcursor = quoteSearch + 1 + spacesBetweenQuoteAndDelimiter + delimLen;\n\n\t\t\t\t\t\t\t// If char after following delimiter is not quoteChar, we find next quote char position\n\t\t\t\t\t\t\tif (input[quoteSearch + 1 + spacesBetweenQuoteAndDelimiter + delimLen] !== quoteChar)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tquoteSearch = input.indexOf(quoteChar, cursor);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tnextDelim = input.indexOf(delim, cursor);\n\t\t\t\t\t\t\tnextNewline = input.indexOf(newline, cursor);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar spacesBetweenQuoteAndNewLine = extraSpaces(nextNewline);\n\n\t\t\t\t\t\t// Closing quote followed by newline or 'unnecessary spaces + newLine'\n\t\t\t\t\t\tif (input.substring(quoteSearch + 1 + spacesBetweenQuoteAndNewLine, quoteSearch + 1 + spacesBetweenQuoteAndNewLine + newlineLen) === newline)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trow.push(input.substring(cursor, quoteSearch).replace(quoteCharRegex, quoteChar));\n\t\t\t\t\t\t\tsaveRow(quoteSearch + 1 + spacesBetweenQuoteAndNewLine + newlineLen);\n\t\t\t\t\t\t\tnextDelim = input.indexOf(delim, cursor);\t// because we may have skipped the nextDelim in the quoted field\n\t\t\t\t\t\t\tquoteSearch = input.indexOf(quoteChar, cursor);\t// we search for first quote in next line\n\n\t\t\t\t\t\t\tif (stepIsFunction)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdoStep();\n\t\t\t\t\t\t\t\tif (aborted)\n\t\t\t\t\t\t\t\t\treturn returnable();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (preview && data.length >= preview)\n\t\t\t\t\t\t\t\treturn returnable(true);\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\t// Checks for valid closing quotes are complete (escaped quotes or quote followed by EOF/delimiter/newline) -- assume these quotes are part of an invalid text string\n\t\t\t\t\t\terrors.push({\n\t\t\t\t\t\t\ttype: 'Quotes',\n\t\t\t\t\t\t\tcode: 'InvalidQuotes',\n\t\t\t\t\t\t\tmessage: 'Trailing quote on quoted field is malformed',\n\t\t\t\t\t\t\trow: data.length,\t// row has yet to be inserted\n\t\t\t\t\t\t\tindex: cursor\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tquoteSearch++;\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Comment found at start of new line\n\t\t\t\tif (comments && row.length === 0 && input.substring(cursor, cursor + commentsLen) === comments)\n\t\t\t\t{\n\t\t\t\t\tif (nextNewline === -1)\t// Comment ends at EOF\n\t\t\t\t\t\treturn returnable();\n\t\t\t\t\tcursor = nextNewline + newlineLen;\n\t\t\t\t\tnextNewline = input.indexOf(newline, cursor);\n\t\t\t\t\tnextDelim = input.indexOf(delim, cursor);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Next delimiter comes before next newline, so we've reached end of field\n\t\t\t\tif (nextDelim !== -1 && (nextDelim < nextNewline || nextNewline === -1))\n\t\t\t\t{\n\t\t\t\t\trow.push(input.substring(cursor, nextDelim));\n\t\t\t\t\tcursor = nextDelim + delimLen;\n\t\t\t\t\t// we look for next delimiter char\n\t\t\t\t\tnextDelim = input.indexOf(delim, cursor);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// End of row\n\t\t\t\tif (nextNewline !== -1)\n\t\t\t\t{\n\t\t\t\t\trow.push(input.substring(cursor, nextNewline));\n\t\t\t\t\tsaveRow(nextNewline + newlineLen);\n\n\t\t\t\t\tif (stepIsFunction)\n\t\t\t\t\t{\n\t\t\t\t\t\tdoStep();\n\t\t\t\t\t\tif (aborted)\n\t\t\t\t\t\t\treturn returnable();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (preview && data.length >= preview)\n\t\t\t\t\t\treturn returnable(true);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn finish();\n\n\n\t\t\tfunction pushRow(row)\n\t\t\t{\n\t\t\t\tdata.push(row);\n\t\t\t\tlastCursor = cursor;\n\t\t\t}\n\n\t\t\t/**\n             * checks if there are extra spaces after closing quote and given index without any text\n             * if Yes, returns the number of spaces\n             */\n\t\t\tfunction extraSpaces(index) {\n\t\t\t\tvar spaceLength = 0;\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tvar textBetweenClosingQuoteAndIndex = input.substring(quoteSearch + 1, index);\n\t\t\t\t\tif (textBetweenClosingQuoteAndIndex && textBetweenClosingQuoteAndIndex.trim() === '') {\n\t\t\t\t\t\tspaceLength = textBetweenClosingQuoteAndIndex.length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn spaceLength;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Appends the remaining input from cursor to the end into\n\t\t\t * row, saves the row, calls step, and returns the results.\n\t\t\t */\n\t\t\tfunction finish(value)\n\t\t\t{\n\t\t\t\tif (ignoreLastRow)\n\t\t\t\t\treturn returnable();\n\t\t\t\tif (typeof value === 'undefined')\n\t\t\t\t\tvalue = input.substring(cursor);\n\t\t\t\trow.push(value);\n\t\t\t\tcursor = inputLen;\t// important in case parsing is paused\n\t\t\t\tpushRow(row);\n\t\t\t\tif (stepIsFunction)\n\t\t\t\t\tdoStep();\n\t\t\t\treturn returnable();\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Appends the current row to the results. It sets the cursor\n\t\t\t * to newCursor and finds the nextNewline. The caller should\n\t\t\t * take care to execute user's step function and check for\n\t\t\t * preview and end parsing if necessary.\n\t\t\t */\n\t\t\tfunction saveRow(newCursor)\n\t\t\t{\n\t\t\t\tcursor = newCursor;\n\t\t\t\tpushRow(row);\n\t\t\t\trow = [];\n\t\t\t\tnextNewline = input.indexOf(newline, cursor);\n\t\t\t}\n\n\t\t\t/** Returns an object with the results, errors, and meta. */\n\t\t\tfunction returnable(stopped)\n\t\t\t{\n\t\t\t\tif (config.header && !baseIndex && data.length && !headerParsed)\n\t\t\t\t{\n\t\t\t\t\tconst result = data[0];\n\t\t\t\t\tconst headerCount = Object.create(null); // To track the count of each base header\n\t\t\t\t\tconst usedHeaders = new Set(result); // To track used headers and avoid duplicates\n\t\t\t\t\tlet duplicateHeaders = false;\n\n\t\t\t\t\tfor (let i = 0; i < result.length; i++) {\n\t\t\t\t\t\tlet header = result[i];\n\t\t\t\t\t\tif (isFunction(config.transformHeader))\n\t\t\t\t\t\t\theader = config.transformHeader(header, i);\n\n\t\t\t\t\t\tif (!headerCount[header]) {\n\t\t\t\t\t\t\theaderCount[header] = 1;\n\t\t\t\t\t\t\tresult[i] = header;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlet newHeader;\n\t\t\t\t\t\t\tlet suffixCount = headerCount[header];\n\n\t\t\t\t\t\t\t// Find a unique new header\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tnewHeader = `${header}_${suffixCount}`;\n\t\t\t\t\t\t\t\tsuffixCount++;\n\t\t\t\t\t\t\t} while (usedHeaders.has(newHeader));\n\n\t\t\t\t\t\t\tusedHeaders.add(newHeader); // Mark this new Header as used\n\t\t\t\t\t\t\tresult[i] = newHeader;\n\t\t\t\t\t\t\theaderCount[header]++;\n\t\t\t\t\t\t\tduplicateHeaders = true;\n\t\t\t\t\t\t\tif (renamedHeaders === null) {\n\t\t\t\t\t\t\t\trenamedHeaders = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trenamedHeaders[newHeader] = header;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tusedHeaders.add(header); // Ensure the original header is marked as used\n\t\t\t\t\t}\n\t\t\t\t\tif (duplicateHeaders) {\n\t\t\t\t\t\tconsole.warn('Duplicate headers found and renamed.');\n\t\t\t\t\t}\n\t\t\t\t\theaderParsed = true;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tdata: data,\n\t\t\t\t\terrors: errors,\n\t\t\t\t\tmeta: {\n\t\t\t\t\t\tdelimiter: delim,\n\t\t\t\t\t\tlinebreak: newline,\n\t\t\t\t\t\taborted: aborted,\n\t\t\t\t\t\ttruncated: !!stopped,\n\t\t\t\t\t\tcursor: lastCursor + (baseIndex || 0),\n\t\t\t\t\t\trenamedHeaders: renamedHeaders\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t/** Executes the user's step function and resets data & errors. */\n\t\t\tfunction doStep()\n\t\t\t{\n\t\t\t\tstep(returnable());\n\t\t\t\tdata = [];\n\t\t\t\terrors = [];\n\t\t\t}\n\t\t};\n\n\t\t/** Sets the abort flag */\n\t\tthis.abort = function()\n\t\t{\n\t\t\taborted = true;\n\t\t};\n\n\t\t/** Gets the cursor position */\n\t\tthis.getCharIndex = function()\n\t\t{\n\t\t\treturn cursor;\n\t\t};\n\t}\n\n\n\tfunction newWorker()\n\t{\n\t\tif (!Papa.WORKERS_SUPPORTED)\n\t\t\treturn false;\n\n\t\tvar workerUrl = getWorkerBlob();\n\t\tvar w = new global.Worker(workerUrl);\n\t\tw.onmessage = mainThreadReceivedMessage;\n\t\tw.id = workerIdCounter++;\n\t\tworkers[w.id] = w;\n\t\treturn w;\n\t}\n\n\t/** Callback when main thread receives a message */\n\tfunction mainThreadReceivedMessage(e)\n\t{\n\t\tvar msg = e.data;\n\t\tvar worker = workers[msg.workerId];\n\t\tvar aborted = false;\n\n\t\tif (msg.error)\n\t\t\tworker.userError(msg.error, msg.file);\n\t\telse if (msg.results && msg.results.data)\n\t\t{\n\t\t\tvar abort = function() {\n\t\t\t\taborted = true;\n\t\t\t\tcompleteWorker(msg.workerId, { data: [], errors: [], meta: { aborted: true } });\n\t\t\t};\n\n\t\t\tvar handle = {\n\t\t\t\tabort: abort,\n\t\t\t\tpause: notImplemented,\n\t\t\t\tresume: notImplemented\n\t\t\t};\n\n\t\t\tif (isFunction(worker.userStep))\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < msg.results.data.length; i++)\n\t\t\t\t{\n\t\t\t\t\tworker.userStep({\n\t\t\t\t\t\tdata: msg.results.data[i],\n\t\t\t\t\t\terrors: msg.results.errors,\n\t\t\t\t\t\tmeta: msg.results.meta\n\t\t\t\t\t}, handle);\n\t\t\t\t\tif (aborted)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdelete msg.results;\t// free memory ASAP\n\t\t\t}\n\t\t\telse if (isFunction(worker.userChunk))\n\t\t\t{\n\t\t\t\tworker.userChunk(msg.results, handle, msg.file);\n\t\t\t\tdelete msg.results;\n\t\t\t}\n\t\t}\n\n\t\tif (msg.finished && !aborted)\n\t\t\tcompleteWorker(msg.workerId, msg.results);\n\t}\n\n\tfunction completeWorker(workerId, results) {\n\t\tvar worker = workers[workerId];\n\t\tif (isFunction(worker.userComplete))\n\t\t\tworker.userComplete(results);\n\t\tworker.terminate();\n\t\tdelete workers[workerId];\n\t}\n\n\tfunction notImplemented() {\n\t\tthrow new Error('Not implemented.');\n\t}\n\n\t/** Callback when worker thread receives a message */\n\tfunction workerThreadReceivedMessage(e)\n\t{\n\t\tvar msg = e.data;\n\n\t\tif (typeof Papa.WORKER_ID === 'undefined' && msg)\n\t\t\tPapa.WORKER_ID = msg.workerId;\n\n\t\tif (typeof msg.input === 'string')\n\t\t{\n\t\t\tglobal.postMessage({\n\t\t\t\tworkerId: Papa.WORKER_ID,\n\t\t\t\tresults: Papa.parse(msg.input, msg.config),\n\t\t\t\tfinished: true\n\t\t\t});\n\t\t}\n\t\telse if ((global.File && msg.input instanceof File) || msg.input instanceof Object)\t// thank you, Safari (see issue #106)\n\t\t{\n\t\t\tvar results = Papa.parse(msg.input, msg.config);\n\t\t\tif (results)\n\t\t\t\tglobal.postMessage({\n\t\t\t\t\tworkerId: Papa.WORKER_ID,\n\t\t\t\t\tresults: results,\n\t\t\t\t\tfinished: true\n\t\t\t\t});\n\t\t}\n\t}\n\n\t/** Makes a deep copy of an array or object (mostly) */\n\tfunction copy(obj)\n\t{\n\t\tif (typeof obj !== 'object' || obj === null)\n\t\t\treturn obj;\n\t\tvar cpy = Array.isArray(obj) ? [] : {};\n\t\tfor (var key in obj)\n\t\t\tcpy[key] = copy(obj[key]);\n\t\treturn cpy;\n\t}\n\n\tfunction bindFunction(f, self)\n\t{\n\t\treturn function() { f.apply(self, arguments); };\n\t}\n\tfunction isFunction(func)\n\t{\n\t\treturn typeof func === 'function';\n\t}\n\n\treturn Papa;\n}));\n","module.exports = require(\"stream\");","import * as vscode from 'vscode';\nimport * as path from 'path';\nimport Papa from 'papaparse';\n\n/**\n * Entry point — called when the extension activates.\n */\nexport function activate(context: vscode.ExtensionContext) {\n  const disposable = vscode.commands.registerCommand('smartViewer.open', () => {\n    const editor = vscode.window.activeTextEditor;\n    if (!editor) {\n      vscode.window.showErrorMessage('No active file open.');\n      return;\n    }\n\n    const document = editor.document;\n    const text = document.getText();\n    const ext = path.extname(document.fileName).toLowerCase();\n\n    let html = '';\n\n    try {\n      if (ext === '.json') {\n        const json = JSON.parse(text);\n        html = getJsonWebviewContent(json);\n      } else if (ext === '.csv') {\n        html = getCsvWebviewContent(text);\n      } else {\n        vscode.window.showErrorMessage('Unsupported file type. Please open a .json or .csv file.');\n        return;\n      }\n    } catch (e: any) {\n      vscode.window.showErrorMessage(`Failed to render file: ${e.message}`);\n      return;\n    }\n\n    const panel = vscode.window.createWebviewPanel(\n      'smartDataViewer',\n      `Smart Viewer: ${path.basename(document.fileName)}`,\n      vscode.ViewColumn.Beside,\n      { enableScripts: true }\n    );\n\n    panel.webview.html = html;\n  });\n\n  context.subscriptions.push(disposable);\n}\n\n/**\n * Deactivation (optional)\n */\nexport function deactivate() {}\n\n/* ---------------- JSON TREE VIEW ---------------- */\n\nfunction getJsonWebviewContent(data: any): string {\n  const treeHTML = jsonToTree(data);\n  return /*html*/`\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\" />\n      <style>\n        :root { color-scheme: light dark; }\n\n        body {\n          font-family: var(--vscode-editor-font-family, sans-serif);\n          color: var(--vscode-editor-foreground);\n          background-color: var(--vscode-editor-background);\n          padding: 1rem;\n          line-height: 1.4;\n        }\n\n        h2 {\n          color: var(--vscode-editor-foreground);\n          border-bottom: 1px solid var(--vscode-editorWidget-border, #555);\n          padding-bottom: 0.3rem;\n          margin-bottom: 1rem;\n        }\n\n        details {\n          margin-left: 1rem;\n          border-left: 1px solid var(--vscode-editorWidget-border, #444);\n          padding-left: 0.5rem;\n        }\n\n        summary {\n          cursor: pointer;\n          color: var(--vscode-textLink-foreground, #569CD6);\n          font-weight: 500;\n        }\n\n        .key { color: var(--vscode-editor-foreground, #ccc); }\n        .value-string { color: var(--vscode-terminal-ansiGreen, #6A9955); }\n        .value-number { color: var(--vscode-terminal-ansiCyan, #4FC1FF); }\n        .value-boolean { color: var(--vscode-terminal-ansiYellow, #DCDCAA); }\n        .value-null { color: var(--vscode-terminal-ansiMagenta, #C586C0); }\n        .primitive { margin-left: 1.5rem; }\n        .bracket { color: var(--vscode-editorLineNumber-activeForeground, #888); }\n\n        summary:hover {\n          background: var(--vscode-list-hoverBackground, rgba(255,255,255,0.05));\n        }\n      </style>\n    </head>\n    <body>\n      <h2>JSON Tree View</h2>\n      ${treeHTML}\n    </body>\n    </html>\n  `;\n}\n\nfunction jsonToTree(data: any): string {\n  if (Array.isArray(data)) {\n    const items = data.map((item, i) => `\n      <details open>\n        <summary><span class=\"bracket\">[${i}]</span></summary>\n        ${jsonToTree(item)}\n      </details>\n    `).join('');\n    return `<div>${items}</div>`;\n  } else if (typeof data === 'object' && data !== null) {\n    const entries = Object.entries(data).map(([key, value]) => `\n      <details open>\n        <summary><span class=\"key\">${key}</span>:</summary>\n        ${jsonToTree(value)}\n      </details>\n    `).join('');\n    return `<div>${entries}</div>`;\n  } else {\n    const type = typeof data;\n    const className =\n      type === 'string' ? 'value-string' :\n      type === 'number' ? 'value-number' :\n      type === 'boolean' ? 'value-boolean' :\n      data === null ? 'value-null' : '';\n    const display = type === 'string' ? `\"${data}\"` : data;\n    return `<div class=\"primitive ${className}\">${display}</div>`;\n  }\n}\n\n/* ---------------- CSV TABLE VIEW (interactive) ---------------- */\n\nfunction getCsvWebviewContent(csvText: string): string {\n  const parsed = Papa.parse(csvText.trim(), { header: true });\n  const data = parsed.data as any[];\n  if (!data.length) return `<p>No CSV data found.</p>`;\n\n  const headers = Object.keys(data[0]);\n\n  return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\" />\n      <style>\n        :root { color-scheme: light dark; }\n\n        body {\n          background: var(--vscode-editor-background);\n          color: var(--vscode-editor-foreground);\n          font-family: var(--vscode-editor-font-family);\n          padding: 1rem;\n        }\n\n        h2 {\n          color: var(--vscode-editor-foreground);\n          border-bottom: 1px solid var(--vscode-editorWidget-border, #555);\n          padding-bottom: 0.3rem;\n          margin-bottom: 1rem;\n        }\n\n        input, select, button {\n          margin-bottom: 0.8rem;\n          padding: 6px 10px;\n          background: var(--vscode-input-background);\n          color: var(--vscode-input-foreground);\n          border: 1px solid var(--vscode-input-border);\n          border-radius: 4px;\n        }\n\n        input { width: 40%; }\n        select { width: 40%; }\n\n        button {\n          cursor: pointer;\n          background: var(--vscode-button-background);\n          color: var(--vscode-button-foreground);\n          border: none;\n          margin-left: 0.5rem;\n        }\n\n        button:hover {\n          background: var(--vscode-button-hoverBackground);\n        }\n\n        table {\n          border-collapse: collapse;\n          width: 100%;\n        }\n\n        th, td {\n          border: 1px solid var(--vscode-editorWidget-border);\n          padding: 6px 10px;\n          text-align: left;\n        }\n\n        th {\n          background: var(--vscode-sideBar-background);\n        }\n\n        tr:nth-child(even) {\n          background: var(--vscode-editorWidget-background);\n        }\n\n        tr:hover {\n          background: var(--vscode-list-hoverBackground, rgba(255,255,255,0.05));\n        }\n\n        .controls {\n          display: flex;\n          gap: 0.5rem;\n          align-items: center;\n          flex-wrap: wrap;\n          margin-bottom: 1rem;\n        }\n      </style>\n    </head>\n    <body>\n      <h2>CSV Table View</h2>\n      <div class=\"controls\">\n        <input type=\"text\" id=\"filterInput\" placeholder=\"Filter rows...\" />\n        <select id=\"sortColumn\">\n          ${headers.map(h => `<option value=\"${h}\">${escapeHtml(h)}</option>`).join('')}\n        </select>\n        <button id=\"sortToggle\" data-dir=\"asc\">▲ Asc</button>\n      </div>\n\n      <table id=\"dataTable\">\n        <thead>\n          <tr>${headers.map(h => `<th>${escapeHtml(h)}</th>`).join('')}</tr>\n        </thead>\n        <tbody>\n          ${data.map(row =>\n            `<tr>${headers.map(h => `<td>${escapeHtml(row[h])}</td>`).join('')}</tr>`\n          ).join('')}\n        </tbody>\n      </table>\n\n      <script>\n        const table = document.getElementById('dataTable');\n        const input = document.getElementById('filterInput');\n        const select = document.getElementById('sortColumn');\n        const toggle = document.getElementById('sortToggle');\n\n        // Filter rows on input\n        input.addEventListener('input', () => {\n          const term = input.value.toLowerCase();\n          table.querySelectorAll('tbody tr').forEach(row => {\n            const visible = Array.from(row.cells).some(cell =>\n              cell.innerText.toLowerCase().includes(term)\n            );\n            row.style.display = visible ? '' : 'none';\n          });\n        });\n\n        // Sort table\n        function sortTable(direction) {\n          const column = select.value;\n          const idx = Array.from(table.querySelector('thead tr').cells)\n            .findIndex(th => th.textContent === column);\n\n          const rows = Array.from(table.querySelector('tbody').rows);\n\n          rows.sort((a, b) => {\n            const A = a.cells[idx].innerText.toLowerCase();\n            const B = b.cells[idx].innerText.toLowerCase();\n            return A.localeCompare(B) * direction;\n          });\n\n          const tbody = table.querySelector('tbody');\n          tbody.innerHTML = '';\n          rows.forEach(r => tbody.appendChild(r));\n        }\n\n        // Toggle sorting direction\n        toggle.addEventListener('click', () => {\n          const dir = toggle.dataset.dir === 'asc' ? 'desc' : 'asc';\n          toggle.dataset.dir = dir;\n          toggle.textContent = dir === 'asc' ? '▲ Asc' : '▼ Desc';\n          sortTable(dir === 'asc' ? 1 : -1);\n        });\n      </script>\n    </body>\n    </html>\n  `;\n}\n\n\n\nfunction escapeHtml(unsafe: any): string {\n  if (unsafe === null || unsafe === undefined) return '';\n  return String(unsafe)\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#039;\");\n}\n","module.exports = require(\"vscode\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["moduleFactory","global","self","window","IS_WORKER","document","postMessage","IS_PAPA_WORKER","workers","workerIdCounter","Papa","_input","_config","dynamicTyping","isFunction","dynamicTypingFunction","transform","worker","WORKERS_SUPPORTED","w","workerUrl","URL","webkitURL","code","toString","BLOB_URL","createObjectURL","Blob","type","Worker","onmessage","mainThreadReceivedMessage","id","newWorker","userStep","step","userChunk","chunk","userComplete","complete","userError","error","input","config","workerId","streamer","NODE_STREAM_INPUT","PAPA_BROWSER_CONTEXT","DuplexStreamStreamer","getStream","string","charCodeAt","slice","download","NetworkStreamer","StringStreamer","readable","read","on","ReadableStreamStreamer","File","Object","FileStreamer","stream","_quotes","_writeHeader","_delimiter","_newline","_quoteChar","_escapedQuote","_skipEmptyLines","_columns","_escapeFormulae","delimiter","BAD_DELIMITERS","filter","value","indexOf","length","quotes","Array","isArray","skipEmptyLines","newline","quoteChar","header","columns","Error","undefined","escapeChar","escapeFormulae","RegExp","unpackConfig","quoteCharRegex","escapeRegExp","JSON","parse","serialize","keys","data","fields","meta","csv","hasHeader","dataKeyedByField","i","safe","row","maxCol","emptyLine","nullLine","join","trim","line","c","cx","push","col","colIdx","str","constructor","Date","stringify","needsQuotes","test","escapedQuoteStr","replace","substrings","hasAny","charAt","RECORD_SEP","String","fromCharCode","UNIT_SEP","BYTE_ORDER_MARK","LocalChunkSize","RemoteChunkSize","DefaultDelimiter","Parser","ParserHandle","jQuery","$","fn","options","queue","this","each","idx","prop","toUpperCase","attr","toLowerCase","FileReader","files","file","inputElem","instanceConfig","extend","parseNextFile","f","before","returned","action","name","elem","reason","fileComplete","userCompleteFunc","results","splice","ChunkStreamer","_handle","_finished","_completed","_halted","_baseIndex","_partialLine","_rowCount","_start","_nextChunk","isFirstChunk","_completeResults","errors","configCopy","copy","chunkSize","parseInt","call","parseChunk","isFakeChunk","skipFirstNLines","guessLineEndings","splitChunk","split","beforeFirstChunk","modifiedChunk","aggregate","paused","aborted","lastIndex","cursor","substring","finishedIncludingPreview","preview","WORKER_ID","finished","concat","_sendError","xhr","_readChunk","_chunkLoaded","url","XMLHttpRequest","withCredentials","onload","bindFunction","onerror","_chunkError","open","downloadRequestBody","downloadRequestHeaders","headers","headerName","setRequestHeader","end","send","err","message","status","readyState","responseText","contentRange","getResponseHeader","lastIndexOf","getFileSize","errorMessage","errorText","statusText","reader","usingAsyncReader","webkitSlice","mozSlice","FileReaderSync","Math","min","size","txt","readAsText","encoding","target","result","event","remaining","s","parseOnData","streamHasEnded","pause","prototype","apply","arguments","resume","_streamData","_streamEnd","_streamError","_checkIsFinished","shift","_streamCleanUp","removeListener","Duplex","parseOnWrite","writeStreamHasFinished","parseCallbackQueue","_onCsvData","_onCsvComplete","_addToParseQueue","callback","_onRead","_onWrite","_onWriteComplete","readableObjectMode","decodeStrings","write","once","_parser","_delimiterError","MAX_FLOAT","pow","MIN_FLOAT","FLOAT","ISO_DATE","_stepCounter","_rowCounter","_paused","_aborted","_fields","_results","needsHeaderRow","processResults","abort","testEmptyLine","addError","d","forEach","addHeader","transformHeader","fillHeaderFields","processRow","rowSource","j","field","parseDynamic","incrementBy","map","applyHeaderAndDynamicTypingAndTransformation","shouldApplyDynamicTyping","floatValue","parseFloat","testFloat","msg","baseIndex","ignoreLastRow","delimGuess","comments","delimitersToGuess","bestDelim","bestDelta","fieldCountPrevRow","maxFieldCount","delim","delta","avgFieldCount","emptyLinesCount","fieldCount","abs","successful","bestDelimiter","guessDelimiter","parserConfig","getCharIndex","setTimeout","re","r","n","nAppearsFirst","numWithN","fastMode","renamedHeaders","headerParsed","inputLen","delimLen","newlineLen","commentsLen","stepIsFunction","lastCursor","returnable","rows","pushRow","doStep","nextDelim","nextNewline","quoteSearch","saveRow","index","finish","spacesBetweenQuoteAndDelimiter","extraSpaces","substr","spacesBetweenQuoteAndNewLine","spaceLength","textBetweenClosingQuoteAndIndex","newCursor","stopped","headerCount","create","usedHeaders","Set","duplicateHeaders","newHeader","suffixCount","has","add","console","warn","linebreak","truncated","e","handle","completeWorker","notImplemented","terminate","obj","cpy","key","func","module","exports","require","context","disposable","vscode","commands","registerCommand","editor","activeTextEditor","showErrorMessage","text","getText","ext","path","extname","fileName","html","jsonToTree","csvText","h","escapeHtml","getCsvWebviewContent","createWebviewPanel","basename","ViewColumn","Beside","enableScripts","webview","subscriptions","item","entries","unsafe","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}